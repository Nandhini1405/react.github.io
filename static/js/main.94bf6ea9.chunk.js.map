{"version":3,"sources":["assets/images/laravel.png","assets/images/linux.jpg","assets/images/Nginx.png","container/Home/index.js","container/Cards/CardsUI.js","container/Cards/Cards.js","container/pages/Laravel/index.js","container/pages/Linux/index.js","container/pages/Nginx/index.js","container/Footer/index.js","container/pages/Laravel/Laravel-modules/Yajra/index.js","container/pages/Laravel/Laravel-modules/Pagination/index.js","container/pages/Linux/Timezone/index.js","container/pages/Nginx/MysqlPassword/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Home","props","className","class","CardUI","src","imgsrc","alt","title","to","page","Cards","img1","content","img2","img3","Component","Laravel","style","background","Linux","Nginx","Footer","Yajra","Pagination","Timezone","Mysql","App","path","exact","component","Crud","MysqlPassword","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.94bf6ea9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/laravel.5bb75c5c.png\";","module.exports = __webpack_public_path__ + \"static/media/linux.8fa3cc85.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Nginx.5ec90225.png\";","import React from 'react'\r\nimport './style.css'\r\n\r\n\r\nconst Home = (props) => (\r\n    <div className=\"body\">\r\n        <div class=\"box\">\r\n            <div></div>\r\n            <div></div>\r\n            <div></div>\r\n            <div></div>\r\n            <div></div>\r\n            <div></div>\r\n            <div></div>\r\n            <div></div>\r\n            <div></div>\r\n            <div></div>\r\n        </div>\r\n        <h2>\r\n            Nandhini Shanmugam\r\n        </h2>\r\n\r\n    </div>\r\n\r\n);\r\nexport default Home;","import React from 'react';\r\nimport './style.css';\r\nimport { NavLink } from 'react-router-dom'\r\n\r\nconst CardUI = (props) => (\r\n    <div className=\"card text-center\">\r\n        <div className=\"overflow\">\r\n            <img src={props.imgsrc} alt=\"Images\" className=\"card-img-top\"/>\r\n        </div>\r\n        <div className=\"card-body text-dark\">\r\n            <h4 className=\"card-title\">{props.title}</h4>\r\n            <p className=\"card-text text-secondary\">\r\n                Laravel is an open-source PHP framework, which is robust and easy to understand. It follows a model-view-controller design pattern. Laravel reuses the existing components of different frameworks which helps in creating a web application. The web application thus designed is more structured and pragmatic.\r\n            </p>\r\n            <NavLink to={props.page} className=\"btn btn-outline-success\">\r\n                View\r\n            </NavLink>\r\n        </div>\r\n    </div>\r\n);\r\nexport default CardUI;","import React, { Component } from 'react'\r\nimport CardUI from './CardsUI'\r\n\r\nimport img1 from '../../assets/images/laravel.png'\r\nimport img2 from '../../assets/images/linux.jpg'\r\nimport img3 from '../../assets/images/Nginx.png'\r\n\r\nclass Cards extends Component\r\n{\r\n    render()\r\n    {\r\n        return (\r\n            <div>\r\n                <div className=\"container-fluid d-flex justify-content-center\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-md-4\">\r\n                            <CardUI imgsrc={img1} title=\"Laravel\" content=\"Laravel is an open-source PHP framework, which is robust and easy to understand. It follows a model-view-controller design pattern. Laravel reuses the existing components of different frameworks which helps in creating a web application. The web application thus designed is more structured and pragmatic.\" page=\"/laravel\" />\r\n                        </div>\r\n                        <div className=\"col-md-4\">\r\n                            <CardUI imgsrc={img2} title=\"Linux\" content=\"Linux is a Unix-like, open source and community-developed operating system for computers, servers, mainframes, mobile devices and embedded devices. It is supported on almost every major computer platform including x86, ARM and SPARC, making it one of the most widely supported operating systems.\" page=\"/linux\" />\r\n                        </div>\r\n                        <div className=\"col-md-4\">\r\n                            <CardUI imgsrc={img3} title=\"Nginx\" content=\"NGINX is open source software for web serving, reverse proxying, caching, load balancing, media streaming, and more. ... In addition to its HTTP server capabilities, NGINX can also function as a proxy server for email  and a reverse proxy and load balancer for HTTP, TCP, and UDP servers.\" page=\"nginx\" />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Cards;","import React from 'react'\r\nimport './laravel.css'\r\nimport { NavLink } from 'react-router-dom'\r\n\r\n\r\nconst Laravel = (props) => (\r\n    <div style={{ background: '#d1ced4'}}>\r\n        <div className=\"content\">\r\n            Laravel\r\n        </div>\r\n        <div>\r\n            <div className=\"course\">\r\n                <h3>Yajra Datatable Package in Laravel</h3>\r\n                <p>Datatables provides us quick search, pagination, ordering, sorting and etc. Datatables is basically jQuery plugins that allows you to add advanced interaction controls to your HTML tables data. Datatables also provide ajax for data searching and getting. you can give very quick layout for search and sorting using Datatables. You can also implement Datatables in your laravel application.</p>\r\n                <NavLink to=\"/laravel/yajra\">View</NavLink>\r\n            </div>\r\n            <div className=\"course\">\r\n                <h3>Laravel Pagination</h3>\r\n                <p> Laravel 6 provide its own method for pagination. But if you are work on code PHP then you have to write long code for pagination and render view etc but in Laravel it is very simple</p>\r\n                <NavLink to=\"/laravel/pagination\">View</NavLink>\r\n            </div>\r\n        </div>\r\n    </div>\r\n);\r\nexport default Laravel;","import React from 'react'\r\nimport './style.css'\r\nimport { NavLink } from 'react-router-dom'\r\n\r\nconst Linux = (props) => (\r\n    <div style={{ background: '#d1ced4'}}>\r\n        <div className=\"content\">\r\n            Linux\r\n        </div>\r\n        <div>\r\n            <div className=\"course-linux\">\r\n                <h3>Procedure to change the Timezone</h3>\r\n                <p>A time zone is a geographic region that has the same standard time. Typically the time zone is set during the installation of the operational system, but it can be easily changed at a later time.</p>\r\n                <p>Using the correct time zone is essential for many systems related tasks and processes. For example, the cron daemon uses the system’s time zone for executing cron jobs. The time zone is also used for logs timestamps.</p>\r\n                <NavLink to=\"/linux/timezone\">View</NavLink>\r\n            </div>\r\n        </div>\r\n    </div>\r\n);\r\nexport default Linux;","import React from 'react'\r\nimport './style.css'\r\nimport { NavLink } from 'react-router-dom'\r\n\r\nconst Nginx = (props) => (\r\n    <div style={{ background: '#d1ced4'}}>\r\n        <div className=\"content\">\r\n            Nginx\r\n        </div>\r\n        <div>\r\n            <div className=\"course-nginx\">\r\n                <h3>CHANGE MYSQL ROOT PASSWORD</h3>\r\n                <p>In MySQL, by default, the username is root and there’s no password. If during the installation process, you accidentally put a password in and don’t remember, here is how to reset the password: Stop the MySQL server if it is running, then restart it with the –skip-grant-tables option.</p>\r\n                <NavLink to=\"/nginx/mysql_password\">View</NavLink>\r\n            </div>\r\n        </div>\r\n    </div>\r\n);\r\nexport default Nginx;","import React from 'react'\r\nimport './style.css'\r\n\r\n\r\n\r\nconst Footer = (props) => (\r\n    <div className=\"footer-main\">\r\n        <div className=\"footer\">\r\n            Mail ID : nandhinishanmugam14.@gmail.com\r\n        </div>\r\n    </div>\r\n);\r\nexport default Footer;","import React from 'react'\r\nimport './yajra.css'\r\n\r\nconst Yajra = (props) => (\r\n    <div>\r\n        <h3>YAJRA DATATABLE PACKAGE IN LARAVEL</h3>\r\n        <div className=\"main-yajra\">\r\n            <h4>Step 1: Install Laravel 6</h4>\r\n            <pre>composer create-project --prefer-dist laravel/laravel blog</pre>\r\n            <h4>Step 2 : Install Yajra Datatable</h4>\r\n            <p>We need to install yajra datatable composer package for datatable, so you can install using following command:</p>\r\n            <pre>composer require yajra/laravel-datatables-oracle</pre>\r\n            <p>After that you need to set providers and alias.</p>\r\n            <h3>In config/app.php</h3>\r\n            <pre>\r\n                <code>\r\n                .....<br />\r\n                'providers' => [<br />\r\n                &nbsp;&nbsp;&nbsp;&nbsp;....<br />\r\n                &nbsp;&nbsp;&nbsp;&nbsp;Yajra\\DataTables\\DataTablesServiceProvider::class,<br />\r\n                ]<br />\r\n                'aliases' => [<br />\r\n                &nbsp;&nbsp;&nbsp;&nbsp;....<br />\r\n                &nbsp;&nbsp;&nbsp;&nbsp;'DataTables' => Yajra\\DataTables\\Facades\\DataTables::class,<br />\r\n                ]<br />\r\n                .....<br />\r\n                </code>\r\n            </pre>\r\n            <h4>Step 3: Add Dummy Records</h4>\r\n            <p>In this step, we will create some dummy users using tinker factory. so let’s create dummy records using bellow command:</p>\r\n            <pre>\r\n            php artisan tinker<br />\r\n            factory(App\\User::class, 200)->create();<br />\r\n            </pre>\r\n            <h4>Step 4: Add Route</h4>\r\n            <p>In this is step we need to create route for datatables layout file and another one for getting data. so open your routes/web.php file and add following route.</p>\r\n            <h3>In routes/web.php</h3>\r\n            <pre>Route::get('users', ['uses'=>'UserController@index', 'as'=>'users.index']);</pre>\r\n            <h4>Step 5: Create Controller</h4>\r\n            <p>In this point, now we should create new controller as UserController. this controller will manage layout and getting data request and return response, so put bellow content in controller file:</p>\r\n            <h3>In app/Http/Controllers/UserController.php</h3>\r\n            <pre>\r\n                <code>\r\n                    &lt;?php<br />\r\n                    namespace App\\Http\\Controllers;<br /><br />  \r\n                    use App\\User;<br />\r\n                    use Illuminate\\Http\\Request;<br />\r\n                    use DataTables;<br /><br />\r\n                    class UserController extends Controller<br />\r\n                    &#123;<br />\r\n                    public function index(Request $request)\r\n                    &#123;<br />\r\n                    &nbsp;&nbsp;if ($request->ajax()) &#123;<br />\r\n                    &nbsp;&nbsp;&nbsp;&nbsp;$data = User::latest()->get();<br />\r\n                    &nbsp;&nbsp;&nbsp;&nbsp;return Datatables::of($data)<br />\r\n                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;->addIndexColumn()<br />\r\n                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;->addColumn('action', function($row)&#123;<br />\r\n                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$btn = '&lt;a href=\"javascript:void(0)\" class=\"edit btn btn-primary btn-sm\">View&lt/a&gt';<br />\r\n                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return $btn;<br />\r\n                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;})<br />\r\n                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;->rawColumns(['action'])<br />\r\n                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;->make(true);<br />\r\n                    &nbsp;&nbsp;}<br />\r\n                    &nbsp;&nbsp;&nbsp;&nbsp;return view('users');<br />\r\n                    &nbsp;&nbsp;}<br />\r\n                    }\r\n                </code>\r\n            </pre>\r\n            <h4>Step 6: Create View</h4>\r\n            <p>In Last step, let’s create users.blade.php(resources/views/users.blade.php) for layout and we will write design code here and put following code:</p>\r\n            <h4>In resources/views/users.blade.php</h4>\r\n            <pre>\r\n                <code>\r\n                &lt;!DOCTYPE html&gt;<br />\r\n                &lt;html&gt;<br />\r\n                &lt;head&gt;<br />\r\n                &nbsp;&nbsp;&lt;title&gt;Laravel 6 Datatables Tutorial&lt;/title&gt;<br />\r\n                &nbsp;&nbsp;&lt;meta name=\"csrf-token\" content=\"&#123;&#123; csrf_token() }}\"&gt;<br />\r\n                &nbsp;&nbsp;&lt;link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.1.3/css/bootstrap.min.css\" /&gt;<br />\r\n                &nbsp;&nbsp;&lt;link href=\"https://cdn.datatables.net/1.10.16/css/jquery.dataTables.min.css\" rel=\"stylesheet\"&gt;<br />\r\n                &nbsp;&nbsp;&lt;link href=\"https://cdn.datatables.net/1.10.19/css/dataTables.bootstrap4.min.css\" rel=\"stylesheet\"&gt;<br />\r\n                &nbsp;&nbsp;&lt;script src=\"https://ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.js\"&gt;&lt;/script&gt;<br />\r\n                &nbsp;&nbsp;&lt;script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery-validate/1.19.0/jquery.validate.js\"&gt;&lt;/script&gt;<br />\r\n                &nbsp;&nbsp;&lt;script src=\"https://cdn.datatables.net/1.10.16/js/jquery.dataTables.min.js\"&gt;&lt;/script&gt;<br />\r\n                &nbsp;&nbsp;&lt;script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/js/bootstrap.min.js\"&gt;&lt;/script&gt;<br />\r\n                &nbsp;&nbsp;&lt;script src=\"https://cdn.datatables.net/1.10.19/js/dataTables.bootstrap4.min.js\"&gt;&lt;/script&gt;<br />\r\n                &lt;/head&gt;<br />\r\n                &lt;body&gt;<br />\r\n                &nbsp;&nbsp;&lt;div class=\"container\"&gt;<br />\r\n                &nbsp;&nbsp;&nbsp;&nbsp;&lt;h1&gt;Laravel 6 Datatables Tutorial&lt;/h1&gt;<br />\r\n                &nbsp;&nbsp;&nbsp;&nbsp;&lt;table class=\"table table-bordered data-table\"&gt;<br />\r\n                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;thead&gt;<br />\r\n                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;tr&gt;<br />\r\n                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;th&gt;No&lt;/th&gt;<br />\r\n                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;th&gt;Name&lt;/th&gt;<br />\r\n                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;th&gt;Email&lt;/th&gt;<br />\r\n                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;th width=\"100px\"&gt;Action&lt;/th&gt;<br />\r\n                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/tr&gt;<br />\r\n                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/thead&gt;<br />\r\n                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;tbody&gt;<br />\r\n                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/tbody&gt;<br />\r\n                &nbsp;&nbsp;&nbsp;&nbsp;&lt;/table&gt;<br />\r\n                &nbsp;&nbsp;&lt;/div&gt;<br />\r\n                &lt;/body&gt;<br />\r\n                &lt;script type=\"text/javascript\"&gt;<br />\r\n                &nbsp;&nbsp;$(function () &#123;<br />\r\n\r\n                &nbsp;&nbsp;&nbsp;&nbsp;var table = $('.data-table').DataTable(&#123;<br />\r\n                &nbsp;&nbsp;&nbsp;&nbsp;processing: true,<br />\r\n                &nbsp;&nbsp;&nbsp;&nbsp;serverSide: true,<br />\r\n                &nbsp;&nbsp;&nbsp;&nbsp;ajax: \"&#123;&#123; route('users.index') }}\",<br />\r\n                &nbsp;&nbsp;&nbsp;&nbsp;columns: [<br />\r\n                &nbsp;&nbsp;&nbsp;&nbsp;&#123;data: 'DT_RowIndex', name: 'DT_RowIndex'},<br />\r\n                &nbsp;&nbsp;&nbsp;&nbsp;&#123;data: 'name', name: 'name'},<br />\r\n                &nbsp;&nbsp;&nbsp;&nbsp;&#123;data: 'email', name: 'email'},<br />\r\n                &nbsp;&nbsp;&nbsp;&nbsp;&#123;data: 'action', name: 'action', orderable: false, searchable: false},<br />\r\n                &nbsp;&nbsp;&nbsp;&nbsp;]<br />\r\n                &nbsp;&nbsp;&nbsp;&nbsp;});<br />\r\n                &nbsp;&nbsp;&nbsp;&nbsp;});<br />\r\n                &lt;/script&gt;<br />\r\n                &lt;/html&gt;<br />\r\n                </code>\r\n            </pre>\r\n            <p>Now run the below command in the Terminal</p>\r\n            <pre>php artisan serve</pre>\r\n            <p>Now you can open bellow url on your browser:</p>\r\n            <pre>localhost:8000/users</pre>\r\n        </div>\r\n    </div>\r\n    \r\n);\r\nexport default Yajra;","import React from 'react'\r\nimport '../Pagination/pagination.css'\r\n\r\nconst Pagination = (props) => (\r\n    <div>\r\n        <h3>Pagination</h3>\r\n        <div className=\"main-page\">\r\n            <h4>Step 1: Add Route</h4>\r\n            <p>First thing is we put one route in one for list users with pagination. So simple add both routes in your route file.</p>\r\n            <h3>In routes/web.php</h3>\r\n            <pre>Route::get('users', 'UserController@index');</pre>\r\n            <h4>Step 2: Create Controller</h4>\r\n            <p>Same things as above for route, here we will add one new method for route. index() will return users with pagination data, so let’s add bellow:</p>\r\n            <h3>app/Http/Controllers/UserController.php</h3>\r\n            <pre>\r\n            public function index()<br />\r\n            &#123;<br />\r\n            &nbsp;&nbsp;$data = User::paginate(10);<br />\r\n            &nbsp;&nbsp;return view('users',compact('data'));<br />\r\n            }\r\n            </pre>\r\n            <h4>Step 3: Create Blade File</h4>\r\n            <p>In this step, you need to create users blade file and put bellow code with links() so it will generate pagination automatically. So let’s put it.</p>\r\n            <h3>In resources/views/users.blade.php</h3>\r\n            <pre>\r\n                <code>\r\n                @extends($theme)<br />\r\n                @section('content')<br />\r\n                &lt;table class=\"table table-bordered\"&gt;<br />\r\n                &nbsp;&lt;thead&gt;<br />\r\n                &nbsp;&nbsp;&lt;tr&gt;<br />\r\n                &nbsp;&nbsp;&lt;th&gt;Name&lt;/th&gt;<br />\r\n                &nbsp;&nbsp;&lt;th width=\"300px;\"&gt;Action&lt;/th&gt;<br />\r\n                &nbsp;&nbsp;&lt;/tr&gt;<br />\r\n                &nbsp;&lt;/thead&gt;<br />\r\n                &nbsp;&lt;tbody&gt;<br />\r\n                &nbsp;&nbsp;@if(!empty($data) &amp;&amp; $data->count())<br />\r\n                &nbsp;&nbsp;@foreach($data as $key => $value)<br />\r\n                &nbsp;&nbsp;&nbsp;&lt;tr&gt;<br />\r\n                &nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&#123;&#123; $value->name }}&lt;/td&gt;<br />\r\n                &nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;<br />\r\n                &nbsp;&nbsp;&nbsp;&nbsp;&lt;button class=\"btn btn-danger\"&gt;Delete&lt;/button&gt;<br />\r\n                &nbsp;&nbsp;&nbsp;&nbsp;&lt;/td&gt;<br />\r\n                &nbsp;&nbsp;&nbsp;&nbsp;&lt;/tr&gt;<br />\r\n                &nbsp;&nbsp;@endforeach<br />\r\n                &nbsp;&nbsp;@else<br />\r\n                &nbsp;&nbsp;&lt;tr&gt;<br />\r\n                &nbsp;&nbsp;&nbsp;&lt;td colspan=\"10\"&gt;There are no data.&lt;/td&gt;<br />\r\n                &nbsp;&nbsp;&lt;/tr&gt;<br />\r\n                &nbsp;&nbsp;@endif<br />\r\n                &nbsp;&lt;/tbody&gt;<br />\r\n                &lt;/table&gt;<br />\r\n                &nbsp;&#123;!! $data-&gt;links() !!}<br />\r\n                @endsection\r\n                </code>\r\n            </pre>\r\n            <p>Now you can run and check this example.</p>\r\n        </div>\r\n    </div>\r\n);\r\nexport default Pagination;","import React from 'react'\r\nimport '../Timezone/timezone.css'\r\n\r\n\r\nconst Timezone = (props) => (\r\n    <div>\r\n        <h3>Procedure to chnage the time zone</h3>\r\n        <div className=\"main-zone\">\r\n            <h4>Changing the Time Zone in Linux</h4><br />\r\n            <p>Before changing the time zone, you’ll need to find out the long name of the time zone you want to use. The time zone naming convention usually uses a “Region/City” format.</p><br />\r\n            <p>To view all available time zones, use the timedatectl command or list the files in the /usr/share/zoneinfo directory:</p>\r\n            <pre>$ timedatectl list-timezones</pre>\r\n            <pre>\r\n            Output :<br />\r\n            ...<br />\r\n            &nbsp;&nbsp;America/Montserrat<br />\r\n            &nbsp;&nbsp;America/Nassau<br />\r\n            &nbsp;&nbsp;America/New_York<br />\r\n            &nbsp;&nbsp;America/Nipigon<br />\r\n            &nbsp;&nbsp;America/Nome<br />\r\n            &nbsp;&nbsp;America/Noronha ...\r\n            </pre>\r\n            <p>Once you identify which time zone is accurate to your location, run the following command as root or sudo user:</p>\r\n            <pre>$ sudo timedatectl set-timezone &tl;your_time_zone&gt;</pre>\r\n            <p>For example, to change the system’s timezone to America/New_York you would type:</p>\r\n            <pre>$ sudo timedatectl set-timezone America/New_York</pre>\r\n            <p>To verify the change, invoke the timedatectl command again:</p>\r\n            <pre>$ timedatectl</pre>\r\n            <pre>\r\n            Output :<br /><br />\r\n\r\n            &nbsp;&nbsp;Local time: Tue 2019-12-03 13:55:09 EST<br />\r\n            &nbsp;&nbsp;Universal time: Tue 2019-12-03 18:55:09 UTC<br />\r\n            &nbsp;&nbsp;RTC time: Tue 2019-12-03 18:02:16<br />\r\n            &nbsp;&nbsp;Time zone: America/New_York (EST, -0500)<br />\r\n            &nbsp;&nbsp;System clock synchronized: no<br />\r\n            &nbsp;&nbsp;systemd-timesyncd.service active: yes<br />\r\n            &nbsp;&nbsp;RTC in local TZ: no<br />\r\n            </pre>\r\n            <p>Successfully changed your system’s time zone.</p>\r\n        </div>\r\n    </div>\r\n);\r\nexport default Timezone;","import React from 'react'\r\nimport './pass.css'\r\n\r\nconst Mysql = (props) => (\r\n    <div>\r\n        <h3>CHANGE MYSQL ROOT PASSWORD</h3>\r\n        <div className=\"main-pass\">\r\n            <h4>To Change MYSQL Password</h4>\r\n            <p>Login in to (Adminer or phpmyadmin etc..) and click SQL commend on it and paste the following code</p>\r\n            <pre>SET PASSWORD FOR 'root'@'localhost' = PASSWORD('new_password')</pre>\r\n        </div>\r\n    </div>\r\n);\r\nexport default Mysql;","import React from 'react';\nimport './App.css';\nimport Home from './container/Home';\nimport Cards from './container/Cards/Cards';\nimport { BrowserRouter as Router } from 'react-router-dom'\nimport Route from 'react-router-dom/Route'\nimport Laravel from './container/pages/Laravel'\nimport Linux from './container/pages/Linux'\nimport Nginx from './container/pages/Nginx'\nimport Footer from './container/Footer';\nimport Crud from './container/pages/Laravel/Laravel-modules/Crud'\nimport Yajra from './container/pages/Laravel/Laravel-modules/Yajra'\nimport Pagination from './container/pages/Laravel/Laravel-modules/Pagination'\nimport Timezone from './container/pages/Linux/Timezone'\nimport MysqlPassword from './container/pages/Nginx/MysqlPassword'\n\nfunction App() {\n  return (\n      <Router>\n        <div className=\"App\">\n          <Route path=\"/\" exact component={Home} />\n          <Route path=\"/\" exact component={Cards} />\n          <Route path=\"/laravel\" exact component={Laravel} />\n          <Route path=\"/linux\" exact component={Linux} />\n          <Route path=\"/nginx\" exact component={Nginx} />\n          <Route path=\"/laravel/crud\" exact component={Crud} />\n          <Route path=\"/laravel/yajra\" exact component={Yajra} />\n          <Route path=\"/laravel/pagination\" exact component={Pagination} />\n          <Route path=\"/linux/timezone\" exact component={Timezone} />\n          <Route path=\"/nginx/mysql_password\" exact component={MysqlPassword} />\n          <Route path=\"/\" exact component={Footer} />\n        </div>\n      </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport \"../node_modules/bootstrap/dist/css/bootstrap.min.css\";\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}